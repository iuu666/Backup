# Cookie：https://raw.githubusercontent.com/iuu666/Backup/main/js/Cookie/cookie.sgmodule
# Emby解锁：https://raw.githubusercontent.com/iuu666/Backup/main/js/Emby/Emby.sgmodule
# 七猫小说解锁：https://raw.githubusercontent.com/iuu666/Backup/main/js/QiMao/qmxs.sgmodule
# 得间小说解锁：https://raw.githubusercontent.com/iuu666/Backup/main/js/DeJian/djxs.sgmodule
# 番茄小说去广告：https://raw.githubusercontent.com/iuu666/Backup/main/js/FanQie/FanQieNovel.sgmodule
# 酷狗概念版自动领取VIP：https://raw.githubusercontent.com/iuu666/Backup/main/js/KuGou/kugou.sgmodule
# Spotify解锁：https://raw.githubusercontent.com/iuu666/Backup/main/js/Spotify/Spotify.module
# Youtube+music解锁：https://raw.githubusercontent.com/iuu666/Backup/main/js/YouTube/YouTube.Enhance.sgmodule
# Tiktok-日本（抓包版区域锁定）：https://raw.githubusercontent.com/iuu666/Backup/main/js/TikTok/TiKTok-JP.sgmodule
# Tiktok-韩国（抓包版区域锁定）：https://raw.githubusercontent.com/iuu666/Backup/main/js/TikTok/TiKTok-KR.sgmodule
# Tiktok-台湾（抓包版区域锁定）：https://raw.githubusercontent.com/iuu666/Backup/main/js/TikTok/TiKTok-TW.sgmodule
# Tiktok-美国（抓包版区域锁定）：https://raw.githubusercontent.com/iuu666/Backup/main/js/TikTok/TiKTok-US.sgmodule
# TestFlight区域限制解除：https://raw.githubusercontent.com/iuu666/Backup/main/js/TestFlight/TestFlightDownload.sgmodule
# Google重定向：https://raw.githubusercontent.com/iuu666/Backup/main/js/URLRewrite/URLRewrite.sgmodule
# 流媒体检测：https://raw.githubusercontent.com/iuu666/Backup/main/js/StreamAll/StreamAll.sgmodule
# NetISP面板：https://raw.githubusercontent.com/iuu666/Backup/main/js/Netisp/NetIspmini.sgmodule
# 清理DNS缓存：https://raw.githubusercontent.com/iuu666/Backup/main/js/FlushDNS/Flush-DNS.sgmodule





[General]
# 并非所有代理服务器都支持 UDP 转发，当一个UDP会话尝试使用一个不支持UDP转发的代理服务器时，Surge默认会回退至direct，可修改为reject以避免潜在的隐私泄露隐患
udp-policy-not-supported-behaviour = reject

# 自定义DNS服务器
dns-server = 223.5.5.5, 223.6.6.6, 119.29.29.29, 114.114.114.114
# 加密DNS
# encrypted-dns-server = https://doh.pub/dns-query, https://dns.alidns.com/dns-query
# 代理请求本地DNS映射
use-local-host-item-for-proxy = false
# 从 /etc/hosts 读取 DNS 记录
read-etc-hosts = true

# 代理接管优先
# compatibility-mode = 0
# 增强版Wi-Fi助理
wifi-assist = false
# 混合网络
all-hybrid = false
# 游戏优化
udp-priority = false

# Internet 测试 URL
internet-test-url = http://baidu.com
# 代理测速 URL
proxy-test-url = http://cp.cloudflare.com/generate_204
# 测试超时（秒）
test-timeout = 10

# GeoIP数据库
# geoip-maxmind-url = https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country.mmdb

# IPv6
ipv6 = false
ipv6-vif = disabled


# 允许 Wi-Fi 访问iOS
allow-wifi-access = false
# 允许个人热点访问
allow-hotspot-access = false
# HTTP代理服务端口
wifi-access-http-port = 6152
# SOCKS5代理服务端口
wifi-access-socks5-port = 6153


# 远程控制器
# external-controller-access = 此处设置密码@127.0.0.1:6170
# 允许由Wi-Fi控制开这里
# external-controller-access = 此处设置密码@0.0.0.0:6170

# HTTP API ＆ Web 控制器
# http-api = 此处设置密码@127.0.0.1:6171
# 允许由WiFi控制开这里
# http-api = 此处设置密码@0.0.0.0:6171
# HTTPS
# http-api-tls = false
# Web控制器
# http-api-web-dashboard = false


# 日志等级
loglevel = notify
# 包含所有网络请求
include-all-networks = false
# 包含本地网络请求
include-local-networks = false
# 包含APNS
include-apns = false
# 包含蜂窝服务
include-cellular-services = false

# 显示拒绝错误的页面
show-error-page-for-reject = true

# 加密DNS跟随出站模式
encrypted-dns-follow-outbound-mode = false

# 加密DNS跳过证书验证
encrypted-dns-skip-cert-verification = false

# 允许DNS-SVCB
allow-dns-svcb = false

# Hijack DNS Servers
hijack-dns = 8.8.8.8:53, 8.8.4.4:53

# Always Real IP Hosts
always-real-ip = *.msftconnecttest.com, *.msftncsi.com, *.srv.nintendo.net, *.stun.playstation.net, xbox.*.microsoft.com, *.xboxlive.com, *.logon.battlenet.com.cn, *.logon.battle.net, stun.l.google.com

# 将TCP连接视为HTTP请求
# force-http-engine-hosts =

# 对发往80与443端口的TCP请求进行协议嗅探，以开启HTTP/HTTPS相关高级功能
# always-raw-tcp-hosts =

# 协议嗅探时，HTTP标头出现关键字，恢复为原始TCP处理
# always-raw-tcp-keywords =

# VIF只能处理TCP和UDP协议，使用此选项绕过特定IP范围以允许所有流量通过
# tun-excluded-routes = 239.255.255.250/32

# VIF接口将自身声明为默认路由，但由于Wi-Fi接口的路由较小，部分流量可能不会经过Surge VIF接口，使用此选项添加较小的路线
# tun-included-routes = 192.168.1.12/32

# 跳过代理
skip-proxy = 127.0.0.1, 192.168.0.0/16, 10.0.0.0/8, 172.16.0.0/12, 100.64.0.0/10, localhost, *.local

# 排除简单主机名
exclude-simple-hostnames = true

# 代理测试UDP示范
# proxy-test-udp = apple.com@8.8.8.8

# Surge HTTP 代理服务需要身份验证
# wifi-access-http-auth = 用户名:密码





[Proxy Group]
# 机场一：奶昔
Nexitally = select, update-interval=0, no-alert=0, hidden=0, include-all-proxies=1, icon-url=https://raw.githubusercontent.com/iuu666/Backup/main/icon\Color/Static_1.png, policy-path=写自己的订阅链接

# 机场二：Tag
Tag = select, update-interval=0, no-alert=0, hidden=0, include-all-proxies=1, icon-url=https://raw.githubusercontent.com/iuu666/Backup/main/icon\Color/Static_1.png, policy-path=写自己的订阅链接

# 机场三：bocchi
bocchi = select, update-interval=0, no-alert=0, hidden=0, include-all-proxies=1, icon-url=https://raw.githubusercontent.com/iuu666/Backup/main/icon\Color/Static_1.png, policy-path=写自己的订阅链接

# 所有机场的节点列表
☁️All Nodes = select, hidden=0, include-other-group="Nexitally, Tag, bocchi", icon-url=https://raw.githubusercontent.com/iuu666/Backup/main/icon\Color/Static.png

# 所有机场的节点 → 进行国家分组，隐藏。默认：自动选择延迟最低节点
香港 = smart, hidden=1, policy-regex-filter=(🇭🇰)|(港)|(Hong)|(HK), include-other-group=☁️All Nodes
美国 = smart, hidden=1, policy-regex-filter=(🇺🇸)|(美)|(States)|(US), include-other-group=☁️All Nodes
日本 = smart, hidden=1, policy-regex-filter=(🇯🇵)|(日)|(Japan)|(JP), include-other-group=☁️All Nodes
荷兰 = smart, hidden=1, policy-regex-filter=(🇳🇱)|(荷)|(Holland)|(NL), include-other-group=☁️All Nodes
俄罗斯 = smart, hidden=1, policy-regex-filter=(🇷🇺)|(俄)|(Russia)|(RU), include-other-group=☁️All Nodes
德国 = smart, hidden=1, policy-regex-filter=(🇩🇪)|(德)|(Germany)|(DE), include-other-group=☁️All Nodes
法国 = smart, hidden=1, policy-regex-filter=(🇫🇷)|(法)|(France)|(FR), include-other-group=☁️All Nodes
瑞士 = smart, hidden=1, policy-regex-filter=(🇨🇭)|(瑞)|(CH), include-other-group=☁️All Nodes
英国 = smart, hidden=1, policy-regex-filter=(🇬🇧)|(英)|(UK), include-other-group=☁️All Nodes
瑞典 = smart, hidden=1, policy-regex-filter=(🇸🇪)|(典)|(SE), include-other-group=☁️All Nodes
保加利亚 = smart, hidden=1, policy-regex-filter=(🇧🇬)|(保)|(BG), include-other-group=☁️All Nodes
奥地利 = smart, hidden=1, policy-regex-filter=(🇦🇹)|(奥)|(AT), include-other-group=☁️All Nodes
爱尔兰 = smart, hidden=1, policy-regex-filter=(🇮🇪)|(爱)|(IE), include-other-group=☁️All Nodes
土耳其 = smart, hidden=1, policy-regex-filter=(🇹🇷)|(土)|(TR), include-other-group=☁️All Nodes
匈牙利 = smart, hidden=1, policy-regex-filter=(🇭🇺)|(匈)|(HU), include-other-group=☁️All Nodes
韩国 = smart, hidden=1, policy-regex-filter=(🇰🇷)|(韩)|(korea)|(KR), include-other-group=☁️All Nodes
台湾 = smart, hidden=1, policy-regex-filter=(🇨🇳)|(台)|(Tai)|(TW), include-other-group=☁️All Nodes
加拿大 = smart, hidden=1, policy-regex-filter=(🇨🇦)|(加)|(CA), include-other-group=☁️All Nodes
澳大利亚 = smart, hidden=1, policy-regex-filter=(🇦🇺)|(澳)|(AU), include-other-group=☁️All Nodes
阿联酋 = smart, hidden=1, policy-regex-filter=(🇦🇪)|(酋)|(UAE), include-other-group=☁️All Nodes
印度 = smart, hidden=1, policy-regex-filter=(🇮🇳)|(印)|(IN), include-other-group=☁️All Nodes
印尼 = smart, hidden=1, policy-regex-filter=(🇮🇩)|(尼)|(ID), include-other-group=☁️All Nodes
巴西 = smart, hidden=1, policy-regex-filter=(🇧🇷)|(巴)|(BR), include-other-group=☁️All Nodes
阿根廷 = smart, hidden=1, policy-regex-filter=(🇦🇷)|(阿)|(AR), include-other-group=☁️All Nodes
智利 = smart, hidden=1, policy-regex-filter=(🇨🇱)|(智)|(CL), include-other-group=☁️All Nodes
新加坡 = smart, hidden=1, policy-regex-filter=(🇸🇬)|(新)|(Singapore)|(SG), include-other-group=☁️All Nodes
意大利 = smart, hidden=1, policy-regex-filter=(🇮🇹)|(意)|(IT), include-other-group=☁️All Nodes

# 软件分流
TikTok = select, ☁️All Nodes, Nexitally, Tag, bocchi, 香港, 日本, 台湾, 韩国, 新加坡, 美国, icon-url=https://raw.githubusercontent.com/iuu666/Backup/main/icon/Color/TikTok_1.png
Instagram = select, ☁️All Nodes, Nexitally, Tag, bocchi, 香港, 日本, 台湾, 韩国, 新加坡, 美国, icon-url=https://raw.githubusercontent.com/iuu666/Backup/main/icon/Color/Instagram.png
Spotify = select, ☁️All Nodes, Nexitally, Tag, bocchi, 香港, 日本, 台湾, 韩国, 新加坡, 美国, icon-url=https://raw.githubusercontent.com/iuu666/Backup/main/icon/Color/Spotify.png
OpenAI = select, ☁️All Nodes, Nexitally, Tag, bocchi, 香港, 日本, 台湾, 韩国, 新加坡, 美国, icon-url=https://raw.githubusercontent.com/iuu666/Backup/main/icon/Color/ChatGPT.png
GitHub = select, ☁️All Nodes, Nexitally, Tag, bocchi, 香港, 日本, 台湾, 韩国, 新加坡, 美国,icon-url=https://raw.githubusercontent.com/iuu666/Backup/main/icon/Color/GitHub.png
Telegram = select, ☁️All Nodes, Nexitally, Tag, bocchi, 香港, 日本, 台湾, 韩国, 新加坡, 美国, icon-url=https://raw.githubusercontent.com/iuu666/Backup/main/icon/Color/Telegram.png
YouTube = select, ☁️All Nodes, Nexitally, Tag, bocchi, 香港, 日本, 台湾, 韩国, 新加坡, 美国, icon-url=https://raw.githubusercontent.com/iuu666/Backup/main/icon/Color/YouTube.png
Netflix = select, ☁️All Nodes, Nexitally, Tag, bocchi, 香港, 日本, 台湾, 韩国, 新加坡, 美国, icon-url=https://raw.githubusercontent.com/iuu666/Backup/main/icon/Color/Netflix.png
Disney = select, ☁️All Nodes, Nexitally, Tag, bocchi, 香港, 日本, 台湾, 韩国, 新加坡, 美国, icon-url=https://raw.githubusercontent.com/iuu666/Backup/main/icon/Color/Disney.png
Google = select, DIRECT, ☁️All Nodes, icon-url=https://raw.githubusercontent.com/iuu666/Backup/main/icon/Color/Google_Search.png
Microsoft = select, DIRECT, ☁️All Nodes, icon-url=https://raw.githubusercontent.com/iuu666/Backup/main/icon/Color/Microsoft.png
Apple = select, DIRECT, ☁️All Nodes, icon-url=https://raw.githubusercontent.com/iuu666/Backup/main/icon/Color/Apple_2.png
Final = select, ☁️All Nodes, DIRECT, icon-url=https://raw.githubusercontent.com/iuu666/Backup/main/icon/Color/Final_1.png




  
[Rule]
# 新增内置策略 NO-HYBRID，等价为 NO-HYBRID = direct, hybrid=off，// 部分服务会校验请求的来源 IP，在开启 hybrid 时有可能因为请求IP变化导致无法正常登录和使用（如招商银行），可使用 NO-HYBRID 对特定请求单独关闭 All Hybrid
# DOMAIN-SUFFIX,cmbchina.com,NO-HYBRID

# HTTP3/QUIC 协议基于 UDP，部分地区 ISP 或线路 UDP 容易受到干扰或限速，屏蔽掉以阻止 HTTP 3 流量的 UDP 流量，强制回退到 TCP。REJECT-NO-DROP 表示不使用默认的自动丢包逻辑，这样 Surge 每次都会返回 ICMP Port Unreachable，应用会立刻回退而不是等超时
# AND,((PROTOCOL,UDP), (DEST-PORT,443)),REJECT-NO-DROP

# Blocking UDP Packets by Youtube and ins 阻止youtube和ins的udp数据包
# AND,((DOMAIN-SUFFIX,googlevideo.com), (DOMAIN-SUFFIX,gvt1.com), (DOMAIN-SUFFIX,cdninstagram.com), (PROTOCOL,UDP)),REJECT

# 一条规则为微信消息提高传输优先级（覆盖 IPv4/IPv6）（仅适用于微信，不适用于 WeChat）
# 二选一即可（第一条规则需要 Surge 版本满足 iOS 5.8.0+ / Mac 5.4.0+），仅供网络调试目的。
DOMAIN-KEYWORD,weixin.qq.com,DIRECT,extended-matching
# USER-AGENT,MicroMessenger Client,DIRECT

# 美团废弃域名
DOMAIN,al-log.d.meituan.net,REJECT
DOMAIN,babel-statistics-android.d.meituan.net,REJECT
DOMAIN,maplocatesdksnapshot.d.meituan.net,REJECT
DOMAIN,metrics-picture.d.meituan.net,REJECT
DOMAIN,route-stats.d.meituan.net,REJECT

# 规则修正
RULE-SET,https://raw.githubusercontent.com/iuu666/Backup/main/BM7/Surge/Direct.list,DIRECT
# 反劫持
RULE-SET,https://raw.githubusercontent.com/iuu666/Backup/main/BM7/Surge/Hijacking.list,REJECT
# 隐私保护
RULE-SET,https://raw.githubusercontent.com/iuu666/Backup/main/BM7/Surge/Privacy_All_No_Resolve.list,REJECT,extended-matching

# Apple
RULE-SET,https://raw.githubusercontent.com/iuu666/Backup/main/BM7/Surge/Apple_All_No_Resolve.list,Apple
# Microsoft
RULE-SET,https://raw.githubusercontent.com/iuu666/Backup/main/BM7/Surge/Microsoft.list,Microsoft
# Google
RULE-SET,https://raw.githubusercontent.com/iuu666/Backup/main/BM7/Surge/Google.list,Google

# OpenAI
RULE-SET,https://raw.githubusercontent.com/iuu666/Backup/main/BM7/Surge/OpenAI.list,OpenAI
# GitHub
RULE-SET,https://raw.githubusercontent.com/iuu666/Backup/main/BM7/Surge/GitHub.list,GitHub
# Telegram
RULE-SET,https://raw.githubusercontent.com/iuu666/Backup/main/BM7/Surge/Telegram.list,Telegram
# Instagram
RULE-SET,https://raw.githubusercontent.com/iuu666/Backup/main/BM7/Surge/Instagram.list,Instagram
# TikTok
RULE-SET,https://raw.githubusercontent.com/iuu666/Backup/main/BM7/Surge/TikTok.list,TikTok
# Spotify
RULE-SET,https://raw.githubusercontent.com/iuu666/Backup/main/BM7/Surge/Spotify.list,Spotify
# YouTube
RULE-SET,https://raw.githubusercontent.com/iuu666/Backup/main/BM7/Surge/YouTube.list,YouTube
# Netflix
RULE-SET,https://raw.githubusercontent.com/iuu666/Backup/main/BM7/Surge/Netflix.list,Netflix
# Disney
RULE-SET,https://raw.githubusercontent.com/iuu666/Backup/main/BM7/Surge/Disney.list,Disney

# 国内媒体（默认直连）
RULE-SET,https://raw.githubusercontent.com/iuu666/Backup/main/BM7/Surge/ChinaMedia.list,DIRECT
# 国外媒体（默认all nodes，也就是所有机场的节点列表）
RULE-SET,https://raw.githubusercontent.com/iuu666/Backup/main/BM7/Surge/GlobalMedia_All_No_Resolve.list,☁️All Nodes

# PROXY（默认all nodes，也就是所有机场的节点列表）
RULE-SET,https://raw.githubusercontent.com/iuu666/Backup/main/BM7/Surge/Proxy_All_No_Resolve.list,☁️All Nodes,extended-matching
# China（默认直连，二选一，不要一起开）
# RULE-SET,https://raw.githubusercontent.com/iuu666/ASN.China/main/ASN.China.list,DIRECT,extended-matching
RULE-SET,https://raw.githubusercontent.com/iuu666/Backup/main/BM7/Surge/China_All_No_Resolve.list,DIRECT,extended-matching


# Local Area Network
RULE-SET,LAN,DIRECT
# Geo IP
GEOIP,CN,DIRECT
# Final
FINAL,Final,dns-failed




  
[Host]
# Firebase Cloud Messaging
mtalk.google.com = 108.177.125.188

# Google Dl
dl.google.com = server:119.29.29.29
dl.l.google.com = server:119.29.29.29
update.googleapis.com = server:119.29.29.29





[MITM]
# 跳过服务端证书验证
skip-server-cert-verify = true

# MITM over HTTP/2
h2 = true

# 自动屏蔽QUIC
hostname = -*snssdk.com, -*amemv.com

# 指定要解密的主机名
ca-passphrase = 

# CA证书信息
ca-p12 = 





[Script]
spotify歌词翻译 = type=http-response,pattern=^https:\/\/spclient\.wg\.spotify\.com\/color-lyrics\/v2\/track\/,requires-body=1,binary-body-mode=1,max-size=0,script-path=https://raw.githubusercontent.com/iuu666/Backup/main/js/SpotifyLyric/Spotify-Lyric.js,argument=appid=写自己的&securityKey=写自己的

快看漫画签到 = type=cron,cronexp=0 8 * * *,script-path=https://raw.githubusercontent.com/iuu666/Backup/main/js/KuaiKan/Kuaikan.js

爱奇艺签到 = type=cron,cronexp=0 9 * * *,timeout=120,script-path=https://raw.githubusercontent.com/iuu666/Backup/main/js/IQiYi/iQIYI.js

美团签到 = type=cron,cronexp=0 10 * * *,script-path=https://raw.githubusercontent.com/iuu666/Backup/main/js/MeiTuan/meituan.js

阿里云盘签到 = type=cron,cronexp=0 7 * * *,wake-system=1,script-path=https://raw.githubusercontent.com/iuu666/Backup/main/js/ALiYunPan/aliYunPanCheckIn.js

沃尔沃签到 = type=cron,cronexp=0 12 * * *,script-path=https://raw.githubusercontent.com/iuu666/Backup/main/js/Volvo/volvo.js
